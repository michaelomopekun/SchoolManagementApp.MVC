@model List<SchoolManagementApp.MVC.Models.UserCourse>
@using SchoolManagementApp.MVC.Models
@using System.Linq
@using Microsoft.AspNetCore.Http

@{
    ViewData["Title"] = "Manage Grades";
    var currentGradeStatus = Context.Request.Query["GradeStatus"].ToString();
    var studentId = Context.Request.Query["StudentId"].ToString();
    var minScore = Context.Request.Query["MinScore"].ToString();
    var maxScore = Context.Request.Query["MaxScore"].ToString();

    // Get grades from ViewBag
    var grades = (IEnumerable<Grade>)ViewBag.Grades;

    // Initialize filtered enrollments
    var filteredEnrollments = Model;

    // Apply Student ID filter
    if (!string.IsNullOrEmpty(studentId) && int.TryParse(studentId, out int sid))
    {
        filteredEnrollments = filteredEnrollments.Where(e => e.UserId == sid).ToList();
    }

    // Apply Grade Status filter
    if (!string.IsNullOrEmpty(currentGradeStatus))
    {
        if (currentGradeStatus == "Graded")
        {
            @* var gradedStudentIds = grades.Where(g => g.Score.HasValue).Select(g => g.UserId); *@
            filteredEnrollments = filteredEnrollments.Where(e => e.gradeStatus == gradeStatus.Graded ).ToList();
        }
        else if (currentGradeStatus == "NotGraded")
        {
            filteredEnrollments = filteredEnrollments.Where(e => e.gradeStatus == gradeStatus.NotGraded ).ToList();

        }
    }

    // Apply Score Range filter
    if (!string.IsNullOrEmpty(minScore) && decimal.TryParse(minScore, out decimal min))
    {
        var validStudentIds = grades.Where(g => g.Score >= min).Select(g => g.UserId);
        filteredEnrollments = filteredEnrollments.Where(e => validStudentIds.Contains(e.UserId)).ToList();
    }

    if (!string.IsNullOrEmpty(maxScore) && decimal.TryParse(maxScore, out decimal max))
    {
         filteredEnrollments = filteredEnrollments.Where(e => 
                    grades.Any(g => g.UserId == e.UserId && 
                        g.CourseId == e.CourseId)).ToList();
    }
}

<div class="container mt-4">
    <div class="alert alert-info">
        <p>Total Enrollments: @Model.Count(s => s.Status == EnrollmentStatus.Active)</p>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <h4>Filter Grades</h4>
        </div>
        <div class="card-body">
            <form method="get" id="filterForm">
                <input type="hidden" name="courseId" value="@ViewBag.CourseId" />
                <div class="row">
                    <div class="col-md-3">
                        <div class="form-group">
                            <label>Student ID</label>
                            <input type="number" name="StudentId" class="form-control" value="@studentId" />
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <label>Grade Status</label>
                            <select name="GradeStatus" class="form-control">
                                <option value="">All</option>
                                @{
                                    var options = new[] { 
                                        new { Value = "Graded", Text = "Graded" },
                                        new { Value = "NotGraded", Text = "Not Graded" }
                                    };
                                    
                                    foreach (var option in options)
                                    {
                                        if (currentGradeStatus == option.Value)
                                        {
                                            <option value="@option.Value" selected>@option.Text</option>
                                        }
                                        else
                                        {
                                            <option value="@option.Value">@option.Text</option>
                                        }
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label>Score Range</label>
                            <div class="input-group">
                                <input type="number" name="MinScore" class="form-control" placeholder="Min" value="@minScore" />
                                <input type="number" name="MaxScore" class="form-control" placeholder="Max" value="@maxScore" />
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <button type="submit" class="btn btn-primary mt-4">Apply</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    @if (!filteredEnrollments.Any())
    {
        <div class="alert alert-warning">
            No students found matching the filter criteria.
        </div>
    }

    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Student</th>
                    <th>Enrolled Course</th>
                    <th>Current Grade</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var enrollment in filteredEnrollments)
                {
                    var grade = grades.FirstOrDefault(g => g.UserId == enrollment.UserId && g.CourseId == enrollment.CourseId);

                    <tr>
                        <td>@enrollment.UserId</td>
                        <td>@enrollment.Course.Name</td>
                        <td>@(grade != null ? $"{grade.Score}%" : "Not Graded")</td>
                        <td>
                            <div class="btn-group" role="group">
                                @if (grade != null)
                                {
                                    <a  asp-controller="Grade"
                                        asp-action="EditGrade" 
                                       asp-route-id="@grade.GradeId"
                                       class="btn btn-warning btn-sm">
                                        <i class="bi bi-pencil"></i> Edit
                                        @* Add this to check if GradeId is flowing into the view *@
                                        @* <p>GradeId in View: @grade.GradeId</p> *@
                                    </a>
                                    <a asp-controller="Grade" 
                                    asp-action="DeleteGrade" 
                                    asp-route-id="@grade.GradeId" 
                                    class="btn btn-danger btn-sm">
                                    <i class="bi bi-trash"></i> Delete
                                    </a>
                                }
                                else
                                {
                                    <a asp-action="AddGrade" 
                                       asp-route-userId="@enrollment.UserId"
                                       asp-route-courseId="@enrollment.CourseId"
                                       class="btn btn-primary btn-sm">
                                        <i class="bi bi-plus-circle"></i> Add Grade
                                    </a>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@* Delete Confirmation Modal *@
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this grade?
            </div>
            <div class="modal-footer">
                <form id="deleteForm" asp-action="DeleteGrade" method="post">
                    <input type="hidden" id="gradeIdToDelete" name="id" />
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function confirmDelete(gradeId) {
            if (confirm('Are you sure you want to delete this grade?')) {
                document.getElementById('gradeIdToDelete').value = gradeId;
                document.getElementById('deleteForm').submit();
            }
        }
    </script>
}