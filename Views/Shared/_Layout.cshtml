@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    var hideNavbar = Context.Request.Path.StartsWithSegments("/Account/Login") ||
    Context.Request.Path.StartsWithSegments("/Account/Register") || Context.Request.Path.StartsWithSegments("/") ||
    Context.Request.Path.StartsWithSegments("/register") || Context.Request.Path.StartsWithSegments("/Account");
    var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

}

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}

<!DOCTYPE html>
<html lang="en">

<head>
    <base href="/SchoolManagementApp.MVC/">
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - SchoolManagementApp.MVC</title>
    <script type="importmap"></script>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/SchoolManagementApp.MVC.styles.css" asp-append-version="true" />
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="~/css/site.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script type= "module" src="~/wwwroot/js/notifications.js"></script>
    @* <script type="module" src="~/js/Student_chat.js"></script> *@
    @* <script type="module" src="~/js/ChatService.js"></script> *@
    @* <script type="module" src="~/js/chat.js"></script> *@
    @* <script type="module" src="~/js/dist/Student_chat.js"></script> *@

    @if (User.IsInRole("Lecturer"))
    {
        <script src="~/js/lecturer_chat.js" type="module"></script>
    }
    else
    {
        <script src="~/js/SignalR.js"></script>
    }
    <link rel="stylesheet" href="~/css/chat.css" />
    <script type= "module" src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script type= "module" src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    @await RenderSectionAsync("Styles", required: false)

    
</head>

<body>
    @if (User.IsInRole("Lecturer"))
    {
        <partial name="_LecturerChatPartial" />
    }
    else
    {
        <partial name="_ChatPartial" />
    }

    <script>
        function logout() {
            localStorage.removeItem("jwtToken");
            //window.location.href = "/login";
            document.getElementById("logoutForm").submit();
        }
    </script>
    <script>
        // Disable back button after logout
        window.onload = function () {
            if (window.history.replaceState) {
                window.history.replaceState(null, null, window.location.href);
            }
        }
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", async () => {
            const notificationList = document.getElementById("notification-list");
            const notificationCount = document.getElementById("notification-count");
            const markAllAsReadBtn = document.getElementById("markAllAsRead");

            async function loadNotifications() {
                try {
                    const response = await fetch("/api/Notification/GetNotifications");
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const notifications = await response.json();
                    console.log("Notifications loaded:", notifications); // Debug log

                    if (notifications && notifications.length > 0) {
                        notificationList.innerHTML = "";
                        notifications.forEach(notification => {
                            const listItem = document.createElement("li");
                            listItem.className = `notification-item dropdown-item ${notification.isRead ? 'read' : 'unread'}`;
                            listItem.dataset.notificationId = notification.id;
                            listItem.innerHTML = `
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="notification-message">${notification.message}</span>
                                    <small class="text-muted ms-2">${new Date(notification.generatedDate).toLocaleString()}</small>
                                </div>
                            `;

                            // Add click handler for individual notification
                            listItem.addEventListener('click', async (e) => {
                                e.preventDefault();
                                e.stopPropagation();

                                if (!notification.isRead) {
                                    try {
                                        const response = await fetch(`/api/Notification/MarkAsRead/${notification.id}`, {
                                            method: 'POST',
                                            headers: {
                                                'X-Requested-With': 'XMLHttpRequest'
                                            }
                                        });

                                        if (!response.ok) {
                                            throw new Error(`HTTP error! status: ${response.status}`);
                                        }

                                        // Update UI
                                        listItem.classList.remove('unread');
                                        listItem.classList.add('read');
                                        notification.isRead = true;

                                        updateNotificationCount(notifications);
                                    } catch (error) {
                                        console.error("Error marking notification as read:", error);
                                    }
                                }
                            });

                            notificationList.appendChild(listItem);
                        });

                        updateNotificationCount(notifications);
                    } else {
                        notificationList.innerHTML = '<li class="dropdown-item text-muted">No notifications</li>';
                        notificationCount.style.display = "none";
                        markAllAsReadBtn.style.display = "none";
                    }
                } catch (error) {
                    console.error("Error fetching notifications:", error);
                    notificationList.innerHTML = '<li class="dropdown-item text-danger">Error loading notifications</li>';
                }
            }

            function updateNotificationCount(notifications) {
                const unreadCount = notifications.filter(n => !n.isRead).length;
                if (unreadCount > 0) {
                    notificationCount.innerText = unreadCount;
                    notificationCount.style.display = "inline";
                    markAllAsReadBtn.style.display = "block";
                } else {
                    notificationCount.style.display = "none";
                    markAllAsReadBtn.style.display = "none";
                }
            }

            // Add event listener for Mark All as Read button
            markAllAsReadBtn.addEventListener('click', async (e) => {
                e.preventDefault();
                e.stopPropagation();

                try {
                    const response = await fetch("/api/Notification/MarkAllAsRead", {
                        method: "POST",
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    // Refresh notifications after marking all as read
                    await loadNotifications();
                } catch (error) {
                    console.error("Error marking all notifications as read:", error);
                }
            });

            // Load notifications initially
            await loadNotifications();

            // Refresh notifications every 30 seconds
            setInterval(loadNotifications, 30000);
        });
    </script>

    <script>
        document.getElementById("notificationBell").addEventListener("click", async () => {
            const notificationCount = document.getElementById("notification-count");

            try {
                await fetch("/api/Notification/MarkAllAsRead", { method: "POST" });
                notificationCount.innerText = "0";
                notificationCount.style.display = "none";
            } catch (error) {
                console.error("Error marking notifications as read:", error);
            }
        });
    </script>
    <header>
        @if (!hideNavbar || SignInManager.IsSignedIn(User))
        {
            <nav
                class="navbar navbar-expand-sm navbar-toggleable-sm navbar-dark bg-dark border-body border-bottom box-shadow mb-3">
                <div class="container-fluid">


                    <a class="navbar-brand" asp-controller="Home" asp-action="Index">SchoolManagementApp</a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                        data-bs-target=".navbar-collapse">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                        <ul class="navbar-nav flex-grow-1">
                            <partial name="_NavbarPartial" />
                            <li class="nav-item">
                                <a class="nav-link text-light" asp-controller="Home" asp-action="Index">Home</a>
                            </li>
                            @* @if(!(User.IsInRole("Lecturer"))){
                            <li class="nav-item">
                                <a class="nav-link text-light" asp-controller="Course" asp-action="CourseList">Courses</a>
                            </li> *@
                            @if (User.IsInRole("Lecturer"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-light" asp-controller="Lecturer" asp-action="MyCourses">My
                                        Courses</a>
                                </li>
                            }
                            <li class="nav-item">
                                <a class="nav-link text-light" asp-area="" asp-controller="Home"
                                    asp-action="About">About</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-light" asp-area="" asp-controller="Home"
                                    asp-action="Privacy">Privacy</a>
                            </li>
                            <li class="nav-item">
                                <a href="javascript:void(0);" id="open-chat-popup" class="nav-link text-light">
                                <i class="fas fa-comments"></i>
                                <span>Chat</span>
                            </a>
                            </li>
                        </ul>


                        <div class="dropdown" id="notification-dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="notificationBell" role="button"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-bell"></i>
                                <span id="notification-count" class="badge bg-danger" style="display: none;">0</span>
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="notificationBell">
                                <li>
                                    <button class="dropdown-item text-primary" id="markAllAsRead">
                                        <i class="fas fa-check-double"></i> Mark all as read
                                    </button>
                                    <div class="dropdown-divider"></div>
                                </li>
                                <div id="notification-list">
                                    <li class="dropdown-item text-muted">No new notifications</li>
                                </div>
                            </ul>
                        </div>

                        <ul class="navbar-nav">
                            <li class="nav-item">
                                <span class="nav-link text-light">Welcome, @User.Identity?.Name!</span>
                            </li>
                            <li class="nav-item">
                                <form asp-controller="Account" asp-action="Logout" method="post" id="logoutForm"
                                    class="form-inline">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-danger">Logout</button>
                                </form>
                            </li>
                        </ul>
                    </div>
                </div>
            </nav>
        }


            <div id="chat-popup-container" class="chat-popup" style="display: none;">
                <div class="chat-header">
                    <h3 id="chat-title">Chat</h3>
                    <button id="close-chat-popup">&times;</button>
                </div>
                <div class="chat-body">
                    <select id="lecturer-dropdown" class="form-select mb-3">
                        <option value="">Select a recipient</option>
                    </select>
                    <div id="chat-messages" class="messages-container" style="display: none;">
                        <div id="message-list" class="message-list"></div>
                    </div>
                </div>
                <div class="chat-footer">
                    <textarea id="chat-input" placeholder="Type your message..." disabled></textarea>
                    <button id="send-chat-message" disabled>Send</button>
                </div>
            </div>


        <div class="container">
            <main role="main" class="pb-3">
                @RenderBody()
            </main>
        </div>

        <footer class="border-top footer text-muted">
            <div class="container">
                SchoolManagementApp <a asp-area="" asp-controller="Home" asp-action="Privacy"></a>
            </div>
        </footer>
        <script src="~/lib/jquery/dist/jquery.min.js"></script>
        <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
        <script src="~/js/chat.js" asp-append-version="true"></script>
        @await RenderSectionAsync("Scripts", required: false)
</body>

</html>
